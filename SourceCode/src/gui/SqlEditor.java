/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import jsyntaxpane.DefaultSyntaxKit;

/**
 *
 * @author Piyush
 */
public class SqlEditor extends javax.swing.JFrame implements ActionListener {

    JTable jTable1;

    Connection con = null;
    Statement st = null;
    boolean transaction;
    ArrayList<String> queries = new ArrayList<String>();
    Savepoint sv;

    /**
     * Creates new form SqlEditor
     */
    public SqlEditor() {
        initComponents();
        //this.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("/gui/luffy.png"));
        this.setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/gui/luffy.png")));
        
        //Piyush- Using jsyntaxpane
        //-------------------------------------------------------
        jsyntaxpane.DefaultSyntaxKit.initKit();
        jEditorPane1.setContentType("text/sql");
        //-------------------------------------------------------

        transaction = false;

        b1.addActionListener(this);
        b2.addActionListener(this);
        b3.addActionListener(this);
        b4.addActionListener(this);

        try {
            //Class.forName("com.mysql.jdbc.Driver");
            //con = DriverManager.getConnection("jdbc:mysql://localhost/database", "root", "root");

            Class.forName("org.sqlite.JDBC");
            con = DriverManager.getConnection("jdbc:sqlite:database.db");
            st = con.createStatement();
        } catch (Exception e) {
            System.exit(5);

        }
        
            jButton1.doClick();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jToolBar1 = new javax.swing.JToolBar();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        b1 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        b2 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        b3 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        b4 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jButton1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SQLite Editor and Parser");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                myCloseOp(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("QUERY AREA"));

        jEditorPane1.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(jEditorPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("OUTPUT AREA"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("HINT/STATUS"));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 0, 255));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.add(jSeparator2);

        b1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/luffy.png"))); // NOI18N
        b1.setToolTipText("Execute the entered Query");
        b1.setFocusable(false);
        b1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        b1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(b1);
        jToolBar1.add(jSeparator5);

        b2.setText("Atomic Transaction");
        b2.setToolTipText("Start Transaction");
        b2.setFocusable(false);
        b2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        b2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(b2);
        jToolBar1.add(jSeparator4);

        b3.setText("Commit");
        b3.setEnabled(false);
        b3.setFocusable(false);
        b3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        b3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(b3);
        jToolBar1.add(jSeparator6);

        b4.setText("Rollback");
        b4.setEnabled(false);
        b4.setFocusable(false);
        b4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        b4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(b4);
        jToolBar1.add(jSeparator7);

        jButton1.setText("Schema");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jMenu1.setText("File");

        jMenuItem6.setText("SQLite Official Website");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/luffy.png"))); // NOI18N
        jMenuItem2.setText("Execute command");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Start Transaction");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Commit Transaction");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Rollback Transaction");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jDesktopPane1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myCloseOp(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_myCloseOp
        int confirm = JOptionPane.showOptionDialog(null, "Are You Sure to Close Application?", "Exit Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (confirm == 0) {
            try {
                st.close();
                con.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "ERROR CLOSE");
            }
            System.exit(0);
        }
    }//GEN-LAST:event_myCloseOp

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        b1.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        b2.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        b3.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        b4.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String s = "***************************************" + "\nSQLite Editor and Parser\n" + "***************************************" + "\n\n   Created By > \'Piyush Bhatt\' \n   at IRDE \n   Under Gudance of > \'Mr. Dinesh Singh Kutiyal, Scientist E, IRDE\'";
        JOptionPane.showMessageDialog(null, s, "About", JOptionPane.PLAIN_MESSAGE);//INFORMATION_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        try {
            //Set your page url in this string. For eg, I m using URL for Google Search engine
            String url = "http://sqlite.org/lang.html";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DatabaseMetaData md;
        String tables = "";
        String out;
        try {
            md = con.getMetaData();
            ResultSet rs = md.getTables(null, null, "%", null);
            ResultSet ab;
            while (rs.next()) {
                tables = tables +"-->"+ rs.getString(3)+"\n";
            }
        } catch (SQLException ex) {
        }
        JTextArea j1;
        out =  "****************TABLES PRESENT IN THE DATABASE 'database.db'*******************\n\n";
        if (tables.isEmpty()) {
            out = out + "No table is present in the database------- Please Create one";
        }
        else{
            out =out+tables;
        }
        j1 = new JTextArea(out);
        j1.setEditable(false);
        j1.setOpaque(false);
        //j1.setBackground(Color.gray);
        j1.setLineWrap(true);
        j1.setFont(new java.awt.Font("Consolas", 0, 12));
        jScrollPane2.setViewportView(j1);
        jScrollPane2.repaint();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*        
         try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         if ("Nimbus".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
         //</editor-fold>
         */
        /* Create and display the form */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code new (optional) ">
        try {
            // Set System L&F
            javax.swing.UIManager.setLookAndFeel(
                    javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SqlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        SqlEditor f = new SqlEditor();
        f.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    //Piyush--ActionListener for Button
    //-----------------------------------------------------------
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == b1) {
            String s;
            String st = "";
            s = jEditorPane1.getText();
            if (!s.isEmpty()) {
                try {
                    //Add here the call to parser
                    st = CheckSyntax.testing(s);
                } catch (IOException ex) {
                    //Logger.getLogger(SqlEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (st.equals("No Errors")) {
                jTextArea1.setText(st);
                try {
                    output(s);
                    queries.add(s);
                } catch (Exception ex) {
                    try {
                        con.rollback(sv);
                        //Message
                        jTextArea1.setText("ROLLING BACK");
                        String s1 = ex.getMessage() + "\n\n*********ROLLING BACK*************\n\nChanges which were Rolled Back on Database:::\n\n";
                        atomicMessage(s1);
                        JOptionPane.showMessageDialog(null, "EXCEPTION OCCURED--ROLLING BACK!");
                    } catch (Exception ata) {
                        JOptionPane.showMessageDialog(null, "ERROR WHILE ROLLING BACK!");
                    } finally {
                        try {
                            transaction = false;
                            con.setAutoCommit(true);
                            b2.setEnabled(true);
                            b3.setEnabled(false);
                            b4.setEnabled(false);
                        } catch (Exception xyz) {
                        }
                    }
                }
            } //updateTerminal(0, s);
            else {
                errorShow(st);
                if (transaction == true) {
                    try {
                        con.rollback(sv);
                        //Message
                        //jTextArea1.setText("ROLLING BACK");
                        String s1 = st + "\n\n*********ROLLING BACK*************\n\nChanges which were Rolled Back on Database:::\n\n";
                        atomicMessage(s1);
                        JOptionPane.showMessageDialog(null, "SYNTAX ERROR OCCURED--ROLLING BACK!");
                    } catch (Exception ata) {
                        JOptionPane.showMessageDialog(null, "ERROR WHILE ROLLING BACK!");
                    } finally {
                        try {
                            transaction = false;
                            con.setAutoCommit(true);
                            b2.setEnabled(true);
                            b3.setEnabled(false);
                            b4.setEnabled(false);
                        } catch (Exception xyz) {
                        }
                    }
                }
            }

        }

        if (e.getSource() == b2) {
            try {
                queries.clear();
                sv = con.setSavepoint("spt");
                transaction = true;
                b3.setEnabled(true);
                b4.setEnabled(true);
                b2.setEnabled(false);
                con.setAutoCommit(false);
                //final boolean oldAutoCommit = con.getConnection().getAutoCommit();
                //stat.getConnection().setAutoCommit(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "ERROR");
            }
        }

        if (e.getSource() == b3) {
            //boolean oldAutoCommit = true;
            //try {
            //oldAutoCommit = con.getAutoCommit();
            //  con.setAutoCommit(false);
            //} catch (SQLException ex) {
            //  JOptionPane.showMessageDialog(null, "ERROR");
            //}
            try {
                transaction = false;
                con.commit();
                //Message
                jTextArea1.setText("COMMIT");
                String s = "\n*********COMMIT OCCURED************* \n\nChanges Committed on Database:::\n\n";
                atomicMessage(s);
                //st.executeBatch();
            } catch (SQLException ata) {
                try {
                    con.rollback(sv);
                    JOptionPane.showMessageDialog(null, "ERROR ON COMMIT! ROLLING BACK");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "ERROR ROLLING BACK!");
                }
            } finally {
                try {
                    con.setAutoCommit(true);
                    b2.setEnabled(true);
                    b3.setEnabled(false);
                    b4.setEnabled(false);
                } catch (Exception xyz) {
                }
            }
        }

        if (e.getSource() == b4) {
            try {
                con.rollback(sv);
                con.setAutoCommit(true);
                jTextArea1.setText("ROLLING BACK");
                String s1 = "\n\n*********ROLLING BACK*************\n\nChanges which were Rolled Back on Database:::\n\n";
                atomicMessage(s1);
                
                JOptionPane.showMessageDialog(null, "ROLLING BACK!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "ERROR WHILE ROLLING BACK!");
            } finally {
                try {
                    transaction = false;
                    con.setAutoCommit(true);
                    b2.setEnabled(true);
                    b3.setEnabled(false);
                    b4.setEnabled(false);
                } catch (Exception xyz) {
                }
            }
        }
    }
    //------------------------------------------------------------

    //Piyush--Displaying output from server
    //-------------------------------------------------------------
    public void output(String s) throws Exception {
        //Connection con = null;
        //Statement st = null;
        ResultSet rs = null;
        String temp;

        //Piyush--
        //connecting app to mysql database
        //populating jtable with resultset from Select command(Query command)
        //try {
        //Class.forName("com.mysql.jdbc.Driver");
        //con = DriverManager.getConnection("jdbc:mysql://localhost/database", "root", "root");
          //  Class.forName("org.sqlite.JDBC");
        //  con = DriverManager.getConnection("jdbc:sqlite:database.db");
        try {
            //st = con.createStatement();
            //s = "select * from users";

            temp = s.substring(0, 6); //selecting first 6 characters for checking which function to call

            //Query statements
            if (true == temp.equalsIgnoreCase("select")) {
                rs = st.executeQuery(s);
                show(rs);
                rs.close();
            } //DML statements
            else if (true == (temp.equalsIgnoreCase("DELETE") || temp.equalsIgnoreCase("INSERT") || temp.equalsIgnoreCase("UPDATE"))) {
                int i;
                i = st.executeUpdate(s);
                updateTerminal(i, s);
            } else {
                st.execute(s);
                updateTerminal(0, s);
            }

        } catch (Exception e) {
            jTextArea1.setText("Runtime Error:Exception at the Database");
            JTextArea j1 = new JTextArea("\n*********EXCEPTION OCCURED************* \n\n" + e.getMessage());

            j1.setEditable(false);
            j1.setOpaque(false);
            //j1.setBackground(Color.gray);
            j1.setLineWrap(true);
            j1.setFont(new java.awt.Font("Consolas", 0, 12));
            jScrollPane2.setViewportView(j1);
            jScrollPane2.repaint();

            if (transaction == true) {
                throw e;
            }

        } //finally {
        // try {
        //st.close();
        //con.close();
        //} catch (Exception e) {
        //  JOptionPane.showMessageDialog(null, "ERROR CLOSE");
        //}
        //}

    }

    //-----------------------------------------------------------------
    //Piyush-- Updating the table
    public void show(ResultSet rs) {
        try {
            ResultSetMetaData rsmt = rs.getMetaData();
            int c = rsmt.getColumnCount();
            Vector column = new Vector(c);
            for (int i = 1; i <= c; i++) {
                column.add(rsmt.getColumnName(i));
            }
            Vector data = new Vector();
            Vector row = new Vector();
            while (rs.next()) {
                row = new Vector(c);
                for (int i = 1; i <= c; i++) {
                    row.add(rs.getString(i));
                }
                data.add(row);
            }

            jTable1 = new JTable(data, column);

            jTable1.setPreferredScrollableViewportSize(new Dimension(300, 80));
            jTable1.setFillsViewportHeight(true);
            jScrollPane2.setViewportView(jTable1);
            jScrollPane2.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(SqlEditor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "ERROR CLOSE");
            }
        }

    }

    public void updateTerminal(int i, String st) {
        String s;
        s = "Statement to be executed:\n>_\n" + st;
        s = s + "\n.\n.\n.\n.\nDatabase Updated";
        s = s + "\n-----------------------------------------";
        s = s + "\n_________________________________________";
        s = s + "\nOUTPUT-->";
        if (i == 0) {
            s = s + " Command successfully executed on the database with no return value";
        } else {
            s = s + " Number of rows modified:" + i;
        }
        s = s + "\n\nNote:View the table for seeing changes(not in case of DROPTABLE)";

        //if (transaction == true) {
        //  s = "Statement to be executed:\n>_\n" + st;
        //s = s + "\n.\n.\n.\n.\nCommand Executed on Database\n Waiting For the Commit";
        //}
        //JLabel jl = new JLabel(s);
        JTextArea j1 = new JTextArea(s);
        j1.setEditable(false);
        j1.setOpaque(false);
        //j1.setBackground(Color.gray);
        j1.setFont(new java.awt.Font("Consolas", 0, 12));
        jScrollPane2.setViewportView(j1);
        jScrollPane2.repaint();
    }

    public void errorShow(String s) {

        int ind = s.indexOf('\'', 18);
        String err = "Sorry No Hint Available!";
        String hstr;

        if (ind - 18 >= 2) {
            String subs = " "+s.substring(18, 21);
            int flag = s.indexOf(subs.toUpperCase(), ind);//checking if substring is present in the messege or not
            err = s.substring(0, s.indexOf('{')) + ": \n";
            if (flag != -1) {
                int x = s.indexOf(subs.toUpperCase(), ind); //where are these three letters in the message after error string's position(ind).
                do {
                    hstr = s.substring(x, s.indexOf(',', x));

                    x = s.indexOf(subs.toUpperCase(), s.indexOf(',', x));//Search next occurance
                    err = err + hstr + "\n";
                } while (x >= 0);
            } else if (flag == -1) {
                subs = s.substring(ind - 3, ind);
                flag = s.indexOf(subs.toUpperCase(), ind);
                if (flag != -1) {
                    int x = s.indexOf(subs.toUpperCase() + ',', ind);

                    do {
                        do { //find the position from where string starts
                            if (s.charAt(x) != ' ') {
                                x--;
                            } else {
                                break;
                            }
                        } while (true);
                        hstr = s.substring(x + 1, s.indexOf(',', x));
                        x = s.indexOf(subs.toUpperCase() + ',', s.indexOf(',', x));

                        err = err + hstr + " \n";
                    } while (x >= 0);
                }
            }
            if (flag == -1) {
                err = "Sorry No Hint Available!";
            }
            jTextArea1.setText(err);
        }

        s = "\n*********SYNTAX ERROR************* \n\n" + s;
        JTextArea j1 = new JTextArea(s);
        j1.setEditable(false);
        j1.setOpaque(false);
        //j1.setBackground(Color.gray);
        j1.setLineWrap(true);
        j1.setFont(new java.awt.Font("Consolas", 0, 12));
        jScrollPane2.setViewportView(j1);
        jScrollPane2.repaint();

    }

    public void atomicMessage(String s) {
        JTextArea j1;
        String query = "";
        for (String xyz : queries) {
            query = query + "-->" + xyz + "\n";
        }
        if (query.isEmpty()) {
            query = "Nothing was executed on the database in this atomic transaction before this command \n";
        }
        j1 = new JTextArea(s + query);
        j1.setEditable(false);
        j1.setOpaque(false);
        //j1.setBackground(Color.gray);
        j1.setLineWrap(true);
        j1.setFont(new java.awt.Font("Consolas", 0, 12));
        jScrollPane2.setViewportView(j1);
        jScrollPane2.repaint();
    }
}


//insert into Employee values("3","Saksham Mittal","sakku2000@gmail.com",21)
